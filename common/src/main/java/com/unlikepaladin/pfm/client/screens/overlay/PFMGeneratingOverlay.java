package com.unlikepaladin.pfm.client.screens.overlay;

import com.mojang.blaze3d.platform.GlStateManager;
import com.mojang.blaze3d.systems.RenderSystem;
import com.unlikepaladin.pfm.runtime.PFMGenerator;
import com.unlikepaladin.pfm.runtime.PFMResourceProgress;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.DrawContext;
import net.minecraft.client.gui.screen.Overlay;
import net.minecraft.client.gui.screen.SplashOverlay;
import net.minecraft.client.render.RenderLayer;
import net.minecraft.client.resource.metadata.TextureResourceMetadata;
import net.minecraft.client.texture.NativeImage;
import net.minecraft.client.texture.ResourceTexture;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.resource.ResourceManager;
import net.minecraft.util.Identifier;
import net.minecraft.util.Util;
import net.minecraft.util.math.ColorHelper;
import net.minecraft.util.math.MathHelper;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.IOException;
import java.util.Base64;
import java.util.Objects;

import static com.unlikepaladin.pfm.client.screens.overlay.GLText.*;

public class PFMGeneratingOverlay extends Overlay {
    private long reloadCompleteTime = -1L;
    private long reloadStartTime = -1L;
    private final boolean reloading;
    private static final String logo = "";
    private static final Identifier pfmLogo = Identifier.of("pfm", "banner");
    private final PFMResourceProgress resourceProgress;
    private float progress;
    private final MinecraftClient client;
    private final Overlay parent;
    private int textureWidth, textureHeight;
    private final GLText glText;
    private static final int PFM_ORANGE = ColorHelper.getArgb(255, 231, 95, 9);
    private final GLText.GLTtext progressText;
    private final GLText.GLTtext notificationText;
    private String lastNotification = null;

    public PFMGeneratingOverlay(Overlay parent, PFMResourceProgress resourceProgress, MinecraftClient client, boolean reloading) {
        this.reloading = reloading;
        this.resourceProgress = resourceProgress;
        this.client = client;
        this.parent = parent;
        client.getTextureManager().registerTexture(pfmLogo, new LogoTexture());
        this.glText = new GLText();
        this.progressText = GLText.gltCreateText();
        this.notificationText = GLText.gltCreateText();
    }

    public static BufferedImage decodeBase64ToImage(String base64Image) throws Exception {
        byte[] imageBytes = Base64.getDecoder().decode(base64Image);
        try (ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes)) {
            return ImageIO.read(bais);
        }
    }

    public NativeImage convertToNativeImage(BufferedImage bufferedImage) {
        NativeImage nativeImage = new NativeImage(bufferedImage.getWidth(), bufferedImage.getHeight(), true);

        for (int x = 0; x < bufferedImage.getWidth(); x++) {
            for (int y = 0; y < bufferedImage.getHeight(); y++) {
                int argb = bufferedImage.getRGB(x, y);
                nativeImage.setColorArgb(x, y, argb);
            }
        }

        return nativeImage;
    }

    private float lastNotifAlpha = 1.0f;
    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        long l = Util.getMeasuringTimeMs();
        if (this.reloading && this.reloadStartTime == -1L) {
            this.reloadStartTime = l;
        }
        float r = (float)(PFM_ORANGE >> 16 & 0xFF) / 255.0f;
        float g = (float)(PFM_ORANGE >> 8 & 0xFF) / 255.0f;
        float b = (float)(PFM_ORANGE & 0xFF) / 255.0f;
        GlStateManager._clearColor(r, g, b, 1.0f);
        GlStateManager._clear(16384);

        glText.gltViewport(this.client.getWindow().getFramebufferWidth(), this.client.getWindow().getFramebufferHeight());
        float timeProgress = this.reloadCompleteTime > -1L ? (float)(l - this.reloadCompleteTime) / 1000.0f : -1.0f;

        int width = this.client.getWindow().getScaledWidth();
        int height = this.client.getWindow().getScaledHeight();

        float progress = this.resourceProgress.getProgress();
        double minRes = Math.min((double)this.client.getWindow().getScaledWidth() * 0.75, (double)this.client.getWindow().getScaledHeight()) * 0.25;

        int barHeight = (int)((double)this.client.getWindow().getScaledHeight() * 0.8325);

        if (progress > 0.99f) {
            this.progress = progress;
        } else {
            this.progress = MathHelper.clamp(this.progress * 0.95f + progress * 0.050000012f, 0.0f, 1.0f);
        }
        double barWidthh = minRes * 4.0;
        int barWidth = (int)(barWidthh * 0.5);
        float scaleFactor = (Math.min((float) width / textureWidth, (float) height / textureHeight) * 0.6f);
        int logoWidth = (int) (textureWidth * scaleFactor);
        int logoHeight = (int) (textureHeight * scaleFactor);

        int x = (width - logoWidth) / 2;
        int y = (height - logoHeight) / 2;
        RenderSystem.setShaderColor(1.0f, 1.0f, 1.0f, 1.0f);
        context.drawTexture(identifier -> RenderLayer.getMojangLogo(), pfmLogo, x, y, 0, 0, logoWidth, logoHeight, logoWidth, logoHeight);

        try (Closeable ignored1 = glText.gltBeginDraw()) {
            float textScale = (float) (client.getWindow().getScaleFactor() / 2.0f) * 1.5f;
            glText.gltColor(1.0f, 1.0f, 1.0f, 0.01f);
            GLText.gltSetText(progressText, this.resourceProgress.getProgressString());
            glText.gltDrawText2DAligned(
                    this.progressText,
                    this.client.getWindow().getFramebufferWidth() / 2.0f,
                    this.client.getWindow().getFramebufferHeight() - (GLText.gltGetTextHeight(progressText, textScale) + GLText.gltGetTextHeight(notificationText, textScale)) + 10f,
                    textScale,
                    GLT_CENTER, GLT_BOTTOM
            );

            if (resourceProgress.getNotificationProgressString() != null && !Objects.equals(resourceProgress.getNotificationProgressString(), lastNotification)) {
                lastNotifAlpha = 1.0f;
            } else {
                lastNotifAlpha = Math.max(lastNotifAlpha - (float) (0.05 * delta), 0.0f);
            }

            glText.gltColor(1.0f, 1.0f, 1.0f, lastNotifAlpha);

            if (resourceProgress.getNotificationProgressString() != null) {
                GLText.gltSetText(notificationText, this.resourceProgress.getNotificationProgressString());
                glText.gltDrawText2DAligned(
                        this.notificationText,
                        this.client.getWindow().getFramebufferWidth() / 2.0f,
                        this.client.getWindow().getFramebufferHeight() - GLText.gltGetTextHeight(notificationText, textScale) + 10f,
                        textScale,
                        GLT_CENTER, GLT_BOTTOM
                );
                lastNotification = resourceProgress.getNotificationProgressString();
            }
        } catch (Exception ignored) {

        }

        if (timeProgress < 1.0f) {
            this.renderProgressBar(context, width / 2 - barWidth, barHeight - 5, width / 2 + barWidth, barHeight + 5, 1.0f - MathHelper.clamp(timeProgress, 0.0f, 1.0f));
        }
        if (timeProgress >= 2.0f || (!PFMGenerator.areAssetsRunning() && !PFMGenerator.isDataRunning())) {
            this.client.setOverlay(parent);
            glText.gltTerminate();
        }
    }

    private void renderProgressBar(DrawContext context, int minX, int minY, int maxX, int maxY, float opacity) {
        int i = MathHelper.ceil((float)(maxX - minX - 2) * this.progress);
        int j = Math.round(opacity * 255.0f);
        int k = ColorHelper.getArgb(j, 255, 255, 255);
        context.fill(minX + 2, minY + 2, minX + i, maxY - 2, k);
        context.fill(minX + 1, minY, maxX - 1, minY + 1, k);
        context.fill(minX + 1, maxY, maxX - 1, maxY - 1, k);
        context.fill(minX, minY, minX + 1, maxY, k);
        context.fill(maxX, minY, maxX - 1, maxY, k);
    }

    @Environment(value= EnvType.CLIENT)
    class LogoTexture
            extends ResourceTexture {
        public LogoTexture() {
            super(pfmLogo);
        }

        @Override
        protected TextureData loadTextureData(ResourceManager resourceManager) {
            TextureData textureData;

            BufferedImage bufferedImage;
            NativeImage nativeImage = null;
            try {
                bufferedImage = decodeBase64ToImage(logo);
                nativeImage = convertToNativeImage(bufferedImage);
                textureWidth = nativeImage.getWidth();
                textureHeight = nativeImage.getHeight();
                textureData = new TextureData(new TextureResourceMetadata(true, true), nativeImage);
            } catch (Throwable throwable) {
                if (nativeImage != null)
                    nativeImage.close();

                return new TextureData(new IOException(throwable.getMessage()));
            }

            return textureData;
        }
    }
}
